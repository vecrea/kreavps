# KreaVPS v4 - docker-compose.yml - Architecture Complète avec Authentik

services:
  # 1. INFRASTRUCTURE & REVERSE PROXY
  traefik:
    image: traefik:v3.0
    container_name: traefik
    restart: unless-stopped
    command:
      - "--api.dashboard=true"
      - "--providers.docker=true"
      - "--providers.file.directory=/etc/traefik/dynamic" # Dit à Traefik de lire ce dossier
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.letsencrypt.acme.email=${ACME_EMAIL}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./configs/traefik:/etc/traefik/dynamic:ro" # On monte notre fichier de config dynamique
      - "letsencrypt-certs:/letsencrypt"
      - "./certs:/etc/traefik/certs:ro" # <--- NOUVEAU VOLUME MONTÉ ICI POUR VOS CERTIFICATS MANUELS
    networks:
      - proxy

  # 2. BASE DE DONNÉES & CACHE
  postgres:
    image: postgres:15-alpine
    container_name: postgres
    restart: unless-stopped
    volumes:
      - "postgres-data:/var/lib/postgresql/data"
    networks:
      - default
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
  
  redis:
    image: redis:alpine
    container_name: redis
    restart: unless-stopped
    networks:
      - default

  # 3. SÉCURITÉ : AUTHENTIK
  authentik-server:
    image: ghcr.io/goauthentik/server:latest
    container_name: authentik-server
    restart: unless-stopped
    networks:
      - proxy
      - default
    environment:
      - AUTHENTIK_SECRET_KEY=${AUTHENTIK_SECRET_KEY}
      - AUTHENTIK_POSTGRESQL__HOST=postgres
      - AUTHENTIK_POSTGRESQL__USER=${POSTGRES_USER}
      - AUTHENTIK_POSTGRESQL__PASSWORD=${POSTGRES_PASSWORD}
      - AUTHENTIK_POSTGRESQL__NAME=authentik # DB dédiée pour authentik
      - AUTHENTIK_REDIS__HOST=redis
    volumes:
      - "authentik-data:/data"
    depends_on:
      postgres: { condition: service_healthy }
      redis: { condition: service_started }
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.authentik.rule=Host(`auth.${DOMAIN}`)"
      - "traefik.http.routers.authentik.service=authentik-server"
      - "traefik.http.services.authentik-server.loadbalancer.server.port=9000"
      - "traefik.http.routers.authentik.entrypoints=websecure"
      # - "traefik.http.routers.authentik.tls.certresolver=letsencrypt" # <--- COMMENTÉ/SUPPRIMÉ

  authentik-worker:
    image: ghcr.io/goauthentik/server:latest
    container_name: authentik-worker
    restart: unless-stopped
    command: worker
    networks:
      - default
    environment:
      - AUTHENTIK_SECRET_KEY=${AUTHENTIK_SECRET_KEY}
      - AUTHENTIK_POSTGRESQL__HOST=postgres
      - AUTHENTIK_POSTGRESQL__USER=${POSTGRES_USER}
      - AUTHENTIK_POSTGRESQL__PASSWORD=${POSTGRES_PASSWORD}
      - AUTHENTIK_POSTGRESQL__NAME=authentik
      - AUTHENTIK_REDIS__HOST=redis
    volumes:
      - "authentik-data:/data"
    depends_on:
      postgres: { condition: service_healthy }
      redis: { condition: service_started }

  # 4. STACK APPLICATIVE
  qdrant:
    image: qdrant/qdrant:latest
    container_name: qdrant
    restart: unless-stopped
    volumes:
      - "qdrant-data:/qdrant/storage"
    networks:
      - proxy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.qdrant.rule=Host(`db.${DOMAIN}`)"
      - "traefik.http.routers.qdrant.middlewares=authentik@file"
      - "traefik.http.routers.qdrant.service=qdrant"
      - "traefik.http.services.qdrant.loadbalancer.server.port=6333"
      - "traefik.http.routers.qdrant.entrypoints=websecure"
      # - "traefik.http.routers.qdrant.tls.certresolver=letsencrypt" # <--- COMMENTÉ/SUPPRIMÉ

  n8n:
    image: docker.n8n.io/n8nio/n8n
    container_name: n8n
    restart: unless-stopped
    volumes:
      - "n8n-data:/home/node/.n8n"
    networks:
      - proxy
      - default
    environment:
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_DATABASE=${POSTGRES_DB}
      - DB_POSTGRESDB_USER=${POSTGRES_USER}
      - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
      - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY}
    depends_on:
      postgres: 
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.n8n.rule=Host(`n8n.${DOMAIN}`)"
      - "traefik.http.routers.n8n.middlewares=authentik@file"
      - "traefik.http.routers.n8n.service=n8n"
      - "traefik.http.services.n8n.loadbalancer.server.port=5678"
      - "traefik.http.routers.n8n.entrypoints=websecure"
      # - "traefik.http.routers.n8n.tls.certresolver=letsencrypt" # <--- COMMENTÉ/SUPPRIMÉ

  open-webui:
    image: ghcr.io/open-webui/open-webui:main
    container_name: open-webui
    restart: unless-stopped
    volumes:
      - "open-webui-data:/app/backend/data"
    networks:
      - proxy
      - default
    environment:
      - OLLAMA_BASE_URL=http://ollama:11434
    depends_on:
      - ollama
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.open-webui.rule=Host(`chat.${DOMAIN}`)"
      - "traefik.http.routers.open-webui.middlewares=authentik@file"
      - "traefik.http.routers.open-webui.service=open-webui"
      - "traefik.http.services.open-webui.loadbalancer.server.port=8080"
      - "traefik.http.routers.open-webui.entrypoints=websecure"
      # - "traefik.http.routers.open-webui.tls.certresolver=letsencrypt" # <--- COMMENTÉ/SUPPRIMÉ

  ollama:
    image: ollama/ollama
    container_name: ollama
    restart: unless-stopped
    volumes:
      - "ollama-data:/root/.ollama"
    networks:
      - default

  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    restart: unless-stopped
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "portainer-data:/data"
    networks:
      - proxy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.portainer.rule=Host(`docker.${DOMAIN}`)"
      - "traefik.http.routers.portainer.middlewares=authentik@file"
      - "traefik.http.routers.portainer.service=portainer"
      - "traefik.http.services.portainer.loadbalancer.server.port=9000"
      - "traefik.http.routers.portainer.entrypoints=websecure"
      # - "traefik.http.routers.portainer.tls.certresolver=letsencrypt" # <--- COMMENTÉ/SUPPRIMÉ

networks:
  proxy:
    name: kreavps_proxy
  default:
    name: kreavps_default

volumes:
  letsencrypt-certs: {}
  postgres-data: {}
  redis-data: {}
  authentik-data: {}
  qdrant-data: {}
  n8n-data: {}
  open-webui-data: {}
  ollama-data: {}
  portainer-data: {}